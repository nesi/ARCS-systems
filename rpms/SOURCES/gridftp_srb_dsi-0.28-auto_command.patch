diff -u -ruN globus_srb_dsi-0.28-orig/globus_gridftp_server_srb.c globus_srb_dsi-0.28/globus_gridftp_server_srb.c
--- globus_srb_dsi-0.28-orig/globus_gridftp_server_srb.c	2007-10-16 20:57:15.000000000 +0800
+++ globus_srb_dsi-0.28/globus_gridftp_server_srb.c	2007-10-16 20:57:24.000000000 +0800
@@ -9,6 +9,11 @@
 static char *                           srb_l_default_hostname = NULL;
 static char *                           srb_l_default_hostname_dn = NULL;
 static char *                           srb_l_default_resource = NULL;
+static char *                           srb_l_auto_executable = NULL;
+static char *                           srb_l_user_name = NULL;
+
+static char *                           auto_executable_string = NULL;
+
 static int                              srb_l_dev_wrapper = 10;
 
 extern char inCondition[];
@@ -134,6 +139,54 @@
     return GLOBUS_SUCCESS;
 }
 
+static
+globus_result_t
+srb_l_opts_auto_executable(
+    char *                              cmd,
+    char *                              parm,
+    void *                              arg,
+    int *                               out_parms_used)
+{
+    if(parm == NULL)
+    {
+        /* TODO: log a warning */
+        return GLOBUS_SUCCESS;
+    }
+
+    *out_parms_used = 1;
+    if(srb_l_auto_executable != NULL)
+    {
+        free(srb_l_auto_executable);
+    }
+    srb_l_auto_executable = strdup(parm);
+
+    return GLOBUS_SUCCESS;
+}
+
+static
+globus_result_t
+srb_l_opts_user_name(
+    char *                              cmd,
+    char *                              parm,
+    void *                              arg,
+    int *                               out_parms_used)
+{
+    if(parm == NULL)
+    {
+        /* TODO: log a warning */
+        return GLOBUS_SUCCESS;
+    }
+
+    *out_parms_used = 1;
+    if(srb_l_user_name != NULL)
+    {
+        free(srb_l_user_name);
+    }
+    srb_l_user_name = strdup(parm);
+
+    return GLOBUS_SUCCESS;
+}
+
 static globus_srb_options_entry_t           srb_l_opts_table[] =
 {
     {"srb_hostname",
@@ -156,7 +209,21 @@
     "<srb host>:<srb port>",
     "The default resource to use when writing data to the SRB backend.",
     1,
-    srb_l_opts_default_resource}
+    srb_l_opts_default_resource},
+    {"srb_auto_executable",
+    NULL,
+    "GLOBUS_SRB_AUTO_COMMAND",
+    "<executable>",
+    "The command to run after a file is succesfully transferred into SRB.",
+    1,
+    srb_l_opts_auto_executable},
+    {"srb_user_name",
+    NULL,
+    "GLOBUS_SRB_USER_NAME",
+    "<unix user name of SRB Admin>",
+    "The unix user name of the SRB Admin.",
+    1,
+    srb_l_opts_user_name}
 };
 
 
@@ -200,6 +267,8 @@
     char *                              domain;
 
     char *                              srb_dn;
+    
+    char *                              pathname;
 } globus_l_gfs_srb_handle_t;
 
 typedef struct globus_l_gfs_srb_trans_s
@@ -1047,7 +1116,6 @@
     {
         globus_gridftp_server_finished_transfer(op, srb_handle->cached_res);
     }
-
     globus_free(collection);
     return;
 
@@ -1121,7 +1189,7 @@
                         "write failed", srb_handle->conn,
                         clStatus(srb_handle->conn));
                     srb_handle->done = GLOBUS_TRUE;
-                }
+                } 
             }
         }
 
@@ -1143,6 +1211,53 @@
     if(finished)
     {
         globus_gridftp_server_finished_transfer(op, srb_handle->cached_res);
+        if(srb_l_auto_executable != NULL)
+        {
+            globus_gfs_log_message(
+                GLOBUS_GFS_LOG_INFO,
+                "Flori's Command Patch: %s %s\n",
+                srb_l_auto_executable,srb_handle->pathname);
+            if(srb_l_user_name != NULL)
+            {
+                globus_gfs_log_message(
+                    GLOBUS_GFS_LOG_INFO,
+                    "Flori's Command Patch: SRB Admin user name: %s\n",srb_l_user_name);
+                auto_executable_string = (char *)calloc (   strlen("su ") +
+                                                            strlen(srb_l_user_name) + 
+                                                            strlen(" -c \"") +
+                                                            strlen(srb_l_auto_executable) +
+                                                            strlen(" ") +
+                                                            strlen(srb_handle->pathname) +
+                                                            strlen(" ") +
+                                                            strlen(srb_handle->user) + 
+                                                            strlen(" ") +
+                                                            strlen(srb_handle->domain) +
+                                                            strlen("\"") + 6,
+                                                            sizeof(char)
+                                                        );
+                strcat(auto_executable_string, "su ");
+                strcat(auto_executable_string,  srb_l_user_name);
+                strcat(auto_executable_string,  " -c \"");
+                strcat(auto_executable_string,  srb_l_auto_executable);
+                strcat(auto_executable_string,  " ");
+                strcat(auto_executable_string,  srb_handle->pathname);
+                strcat(auto_executable_string,  " ");
+                strcat(auto_executable_string,  srb_handle->user);
+                strcat(auto_executable_string,  " ");
+                strcat(auto_executable_string,  srb_handle->domain);
+                strcat(auto_executable_string, "\"");
+                globus_gfs_log_message(
+                    GLOBUS_GFS_LOG_INFO,
+                    "Flori's Command Patch: Full Command: %s\n",auto_executable_string);
+                system(auto_executable_string);
+            }
+            else
+            {
+                globus_gfs_log_message(
+                    GLOBUS_GFS_LOG_INFO,
+                    "Flori's Command Patch: SRB Admin user name not specified. Command will not execute\n");
+            }
+        }
     }
 }
 
@@ -1238,7 +1353,9 @@
             " module.  It cannot be an eret alone");
         goto alloc_error;
     }
-
+    
+    srb_handle->pathname = transfer_info->pathname;
+    
     srb_l_reduce_path(transfer_info->pathname);
     collection = strdup(transfer_info->pathname);
     if(collection == NULL)
