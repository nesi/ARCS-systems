# pbs.pm
# iVEC version
# Terry Rankine

use Globus::GRAM::Error;
use Globus::GRAM::JobState;
use Globus::GRAM::JobManager;
use Globus::Core::Paths;

use Config;

# NOTE: This package name must match the name of the .pm file!!
package Globus::GRAM::JobManager::pbs;

@ISA = qw(Globus::GRAM::JobManager);

my ($mpirun, $mpiexec, $qsub, $qstat, $qdel, $cluster, $cpu_per_node, $remote_shell);

BEGIN
{
    $mpiexec = 'mpiexec';
    $mpirun = 'mpirun';
#    IVEC LOCATION DIFFERENT - mod TR;
    $qsub =   '/usr/local/pbs/bin/qsub';
    $qstat =  '/usr/local/pbs/bin/qstat';
    $qdel = '/usr/local/pbs/bin/qdel';
    $cluster = 1;
    $cpu_per_node = 1;
    $remote_shell = '/usr/bin/ssh';
}

sub myceil ($)
{
    my $x = shift;
    ( abs($x-int($x)) < 1E-12 ) ? $x : int($x < 0 ? $x : $x+1.0);
}

sub submit
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $status;
    my $pbs_job_script;
    my $pbs_job_script_name;
    my $job_id;
    my $rsh_env;
    my @arguments;
    my $email_when = '';
    my $cache_pgm = "$Globus::Core::Paths::bindir/globus-gass-cache";
    my %library_vars;

    # APAC-specific variables
    my $nodes;
    my $submit_host;
    my $job_name;
    my $modulestring = "";
    my @modules;
    my @environment;

    $self->log("Entering pbs submit");

    # check jobtype
    if(defined($description->jobtype()))
    {
#       iVEC dont support multiple jobs.
	if($description->jobtype !~ /^(mpi|single|multiple)$/)
#	if($description->jobtype !~ /^(mpi|single)$/)
	{
            $self->log("bad job type");
            $self->log($description->jobtype());
	    return Globus::GRAM::Error::JOBTYPE_NOT_SUPPORTED;
	}
    }
    if( $description->directory eq '')
    {
	return Globus::GRAM::Error::RSL_DIRECTORY();
    }
    if ($description->directory() =~ m|^[^/]|) {
        $description->add("directory",
                $ENV{HOME} . '/' . $description->directory());
    }
    chdir $description->directory() or
        1; ## Error exit below in-appropriate at some APAC sites ##
  #     return Globus::GRAM::Error::BAD_DIRECTORY();

    $self->nfssync( $description->executable() )
	unless $description->executable() eq '';
    $self->nfssync( $description->stdin() )
	unless $description->stdin() eq '';
    if( $description->executable eq '')
    {
	return Globus::GRAM::Error::RSL_EXECUTABLE();
    }
    elsif( $description->stdin() eq '')
    {
	return Globus::GRAM::Error::RSL_STDIN;
    }

    $self->log("Determining job max time cpu from job description");
    if(defined($description->max_cpu_time())) 
    {
	$cpu_time = $description->max_cpu_time();
	$self->log("   using maxcputime of $cpu_time");
    }
    elsif(! $cluster && defined($description->max_time()))
    {
        $cpu_time = $description->max_time();
        $self->log("   using maxtime of $cpu_time");
    }
    else
    {
	$cpu_time = 0;
	$self->log('   using queue default');
    }

    $self->log("Determining job max wall time limit from job description");
    if(defined($description->max_wall_time()))
    {
	$wall_time = $description->max_wall_time();
	$self->log("   using maxwalltime of $wall_time");
    }
    elsif($cluster && defined($description->max_time()))
    {
       $wall_time = $description->max_time();
       $self->log("   using maxtime of $wall_time");
    }
    else
    {
	$wall_time = 0;
	$self->log('   using queue default');
    }

    $self->log('Building job script');

    $pbs_job_script_name = $self->job_dir() . '/scheduler_pbs_job_script';

    local(*JOB);
    open( JOB, '>' . $pbs_job_script_name );
    print JOB<<"EOF";
#!/bin/bash
# PBS batch job script built by Globus job manager
# Super modified by mrt@ivec.org for ANUPBS
#
#PBS -p 25
#PBS -S /bin/bash
EOF
    chomp($submit_host = `/bin/hostname -s`);	# APAC-specific job-name
    $job_name = "Grid_", $submit_host; 
    print JOB '#PBS -N Grid_', $submit_host, "_\n";

    
    if($description->software() ne '')
    {
        print JOB '#PBS -l software=', $description->software(), "\n";
    }
    elsif($description->code() eq 'Abaqus')
    {
        print JOB '#PBS -l software=', $description->software(), "\n";
    }
    if($description->nodescratch() ne '')
    {
        print JOB '#PBS -l jobfs=', $description->nodescratch(), "\n";
    }
    elsif($description->jobfs() ne '')
    {
        print JOB '#PBS -l jobfs=', $description->jobfs(), "\n";
    }

    if($description->email_address() ne '')
    {
        print JOB '#PBS -M ', $description->email_address(), "\n";
    }
    if($description->emailonabort() eq 'yes')
    {
        $email_when .= 'a';
    }
    if($description->emailonexecution() eq 'yes')
    {
        $email_when .= 'b';
    }
    if($description->emailontermination() eq 'yes')
    {
        $email_when .= 'e';
    }
    if($email_when eq '')
    {
	$email_when = 'n';
    }
    print JOB "#PBS -m $email_when\n";

    if($description->queue() ne '')
    {
        $queue = $description->queue();
        $queue =~ s/cognac/beer/;
        print JOB '#PBS -q ', $queue, "\n";
    }
    if($description->project() ne '')
    {
	print JOB '#PBS -A ', $description->project(), "\n";
        # iVEC mod - i am super thanks for asking.
        print JOB '#PBS -W group_list=', $description->project(), "\n"; # iVEC
        chomp($group = $description->project());
    }
    else # this means they have specified a project;
    {
        $username=getpwuid($<);
        $returnvar=`grep $username /etc/grid-security/projects/project-mapfile`;
        ($username, $group)=split (/ /,$returnvar);
        chomp($group);
        print JOB '#PBS -A ', $group ."\n" ;
        print JOB '#PBS -W group_list=', $group . "\n"; # iVEC
    }

    if($cpu_time != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $total_cpu_time = $cpu_time * $description->count();
	}
	else
	{
	    $total_cpu_time = $cpu_time;
	}
	print JOB "#PBS -l pcput=${cpu_time}:00\n";
	print JOB "#PBS -l cput=${total_cpu_time}:00\n";
    }

    if($wall_time != 0)
    {
	print JOB "#PBS -l walltime=${wall_time}:00\n";
    }

    if($description->max_memory() != 0)
    {
	if($description->jobtype() eq 'multiple')
	{
	    $max_memory = $description->max_memory() * $description->count;
	}
	else
	{
	    $max_memory = $description->max_memory();
	}
	print JOB "#PBS -l vmem=${max_memory}mb\n";
    }
   
# why did vpac comment out the stdout/stderr lines?
# defaults back to home dir for now...
print JOB '#PBS -o cognac:', $ENV{'HOME'}, "/", "\n";
print JOB '#PBS -e cognac:', $ENV{'HOME'}, "/", "\n";


#   The modified count line
    if($description->count() != 0)
    {
	print JOB '#PBS -l ncpus=',  $description->count(), "\n";
    }

    $rsh_env = '';

    if ( $ENV{X509_USER_CERT} =~ /.gram_job_proxy./) 
    {
       $rsh_env .= "GRID_USER_DN=";
       ($crap,$myCertSubject) = split(/subject= /, `tail -n39 $ENV{X509_USER_CERT} | openssl x509 -noout -subject`);
       chomp($myCertSubject);
       $rsh_env .= '"' . $myCertSubject . '"' ."; #or fail\n";
       $rsh_env .= "export GRID_USER_DN;\n";
       $rsh_env .= "GRID_USER_EMAIL=";
       $myCertEmail = `tail -n39 $ENV{X509_USER_CERT} | openssl x509 -noout -email`;
       chomp($myCertEmail);
       $rsh_env .= '"' . $myCertEmail . '"' . ";\n";
       $rsh_env .= "export GRID_USER_EMAIL;\n";
       print JOB "#PBS -v GRID_USER_DN=" . '"' . $myCertSubject . '"' . ",GRID_USER_EMAIL=" . '"' . $myCertEmail . '"' . "\n";
       if($description->email_address() eq '')
       {
          print JOB '#PBS -M ', $myCertEmail . "\n";
       }
    }
    else
    {
       print JOB "#PBS -v GLOBUS_USER_SUBJECT=".'"'.$ENV{GLOBUS_USER_SUBJECT}.'"'."\n";
    }

    #guarrantee ivec can support "module xxx"
    print JOB "source  /usr/share/modules/init/bash\n";

    $library_vars{LD_LIBRARY_PATH} = 0;
    if($Config{osname} eq 'irix')
    {
	$library_vars{LD_LIBRARYN32_PATH} = 0;
	$library_vars{LD_LIBRARY64_PATH} = 0;
    }

    @environment = $description->environment(); # APAC-specific env't variables
    push @environment,(['USER_SCRATCH',$ENV{'HOME'}."/.globus/scratch"],
                       ['NODE_SCRATCH',$ENV{'HOME'}."/.globus/scratch"],
                       ['GLOBUS_USER_HOME',$ENV{'HOME'}],
                       ['GLOBUS_USER_NAME',$ENV{'LOGNAME'}],
                       ['GLOBUS_SCRATCH_DIR',$ENV{'HOME'}."/.globus/scratch"]);


    foreach my $tuple (@environment)
    {
	if(!ref($tuple) || scalar(@$tuple) != 2)
	{
	    return Globus::GRAM::Error::RSL_ENVIRONMENT();
	}
	if(exists($library_vars{$tuple->[0]}))
	{
	    $tuple->[1] .= ":$library_string";
	    $library_vars{$tuple->[0]} = 1;
	}

        push(@new_env, $tuple->[0] . '="' . $tuple->[1] . '"');

	$tuple->[0] =~ s/\\/\\\\/g;
	$tuple->[0] =~ s/\$/\\\$/g;
	$tuple->[0] =~ s/"/\\\"/g; #"
	$tuple->[0] =~ s/`/\\\`/g; #`

	$tuple->[1] =~ s/\\/\\\\/g;
	$tuple->[1] =~ s/\$/\\\$/g;
	$tuple->[1] =~ s/"/\\\"/g; #"
	$tuple->[1] =~ s/`/\\\`/g; #`

        # iVEC specific .. module loader
        if ( $tuple->[0] =~ m/MODULE_LOAD/) {
           $modulestring .= "\n#the following eval is an old module command\n#this should be replaced\neval `/usr/bin/modulecmd sh load " . $tuple->[1] . "`\n"
        }
        else {
           $rsh_env .= $tuple->[0] . '="' . $tuple->[1] . "\";\n"
	            .  'export ' . $tuple->[0] . ";\n"
        }
    }

    foreach (keys %library_vars)
    {
	if($library_vars{$_} == 0)
	{
            my $library_path = $description->library_path();
	    push(@new_env, $_ . '=' . $library_path);
	    $rsh_env .= "$_=$library_path;\n"
	              . "export $_;\n";
	}
    }
    

    print JOB "$rsh_env";

    @modules = $description->module();
    $modulessize = @modules;

    if($modulessize > 0)
    {
       #Module extension.
       $modulestring .= "\n#number of modules = " . $modulessize . " \n";
       foreach (@modules)
       {
           $modulestring .= "\n#NewVersion\nmodule load " . $_ . "\n";
       }
    }
    else
    {
       $modulestring .= "#bad module()==null \n\n\$modulessize = " . $modulessize . "\n";
    }

    print JOB "\n#Change to directory requested by user\n";
    print JOB 'cd ' . $description->directory() . "\n\n";
    
    print JOB "$modulestring";

    @arguments = $description->arguments();

    foreach(@arguments)
    {
        if(ref($_))
	{
	    return Globus::GRAM::Error::RSL_ARGUMENTS;
	}
    }
    if($#arguments >= 0)
    {
        foreach(@arguments)
	{
	    $self->log("Transforming argument \"$_\"\n");
	    $_ =~ s/\\/\\\\/g;
#	    $_ =~ s/\$/\\\$/g;
	    $_ =~ s/"/\\\"/g; #"
	    $_ =~ s/`/\\\`/g; #`
	    $self->log("Transformed to \"$_\"\n");

	    $args .= '"' . $_ . '" ';
	}
    }
    else
    {
	$args = '';
    }

    print JOB "touch " . $description->stdout() . "\n";
    print JOB "touch " . $description->stderr() . "\n";

    if($description->jobtype() eq 'mpi')
    {
        print JOB "$mpirun -np " . $description->count();
        print JOB " ", $description->executable(), " $args < ",
                  $description->stdin(), " > ", 
                  $description->stdout(), " 2> ", 
                  $description->stderr(), "\n";
    }
    elsif($description->jobtype() eq 'multiple')
    {
        $self->log("warning Multiple job sent");
#        why did it get here - should have failed at the top 
	print JOB "\necho  MULTI MULTI MULTI \n";
        print JOB $description->executable(), " $args < ",
           $description->stdin(), " > ",
           $description->stdout(), " 2> ",
           $description->stderr(), "\n";

#         return Globus::GRAM::Error::JOBTYPE_NOT_SUPPORTED;
    }
    else
    {
        if ($description->dplace() ne '')
        {   
            print JOB "\n#DPLACE extension ACTIVE <dplace>" ,
                      $description->dplace(), "</dplace>\n";
            print JOB "dplace -x " . $description->dplace() . " ";
        }
	print JOB $description->executable(), " $args < ",
           $description->stdin(), " > ", 
           $description->stdout(), " 2> ", 
           $description->stderr(), "\n";
    }

    print JOB "exit 0\n";

    if ( $ENV{X509_USER_CERT} =~ /.gram_job_proxy./) {
      open( FILE, "< $ENV{X509_USER_CERT}" ) or die "Can't open $filename : $!";
      while ( <FILE> ) {
        print JOB;
      }
      close (FILE);
    }
    

    close(JOB);


    $self->nfssync( $pbs_job_script_name );
    $self->log("submitting job -- $qsub < $pbs_job_script_name");

    `cp $pbs_job_script_name /tmp/job.globus.pbs.$ENV{'LOGNAME'}`;
    chomp($job_id = `$qsub < $pbs_job_script_name `);

    #APAC-specific
    #Graham's logger for jobid
    `logger -p local6.info -t Job-DN "$job_id $ENV{GLOBUS_USER_SUBJECT}"`;


    if($? == 0)
    {
        $self->log("job submission successful, setting state to PENDING");
	return {JOB_ID => $job_id,
	        JOB_STATE => Globus::GRAM::JobState::PENDING };
    }
    else
    {
        $self->log("qsub returned $job_id");
        $self->log("qsub stderr $stderr");

        $self->respond({GT3_FAILURE_MESSAGE => $stderr });
    }

    return Globus::GRAM::Error::JOB_EXECUTION_FAILED();
}

sub poll
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();
    my $state;
    my $status_line;
    my $exit_code;

    $self->log("polling job $job_id");

    # Get job id from the full qstat output.
    $_ = (grep(/job_state/, $self->pipe_out_cmd($qstat, '-f', $job_id)))[0];
    # get the exit code of the qstat command.  for info search $CHILD_ERROR
    # in perlvar documentation.
    $exit_code = $? >> 8;

    $self->log("qstat job_state line is: $_");

    # return code 153 = "Unknown Job Id".
    # verifying that the job is no longer there.
    if($exit_code == 153)
    {
        $self->log("qstat rc is 153 == Unknown Job ID == DONE");
        $state = Globus::GRAM::JobState::DONE;
	$self->nfssync( $description->stdout() )
	    if $description->stdout() ne '';
	$self->nfssync( $description->stderr() )
	    if $description->stderr() ne '';
    }
    else
    {

        # Get 3rd field (after = )
        $_ = (split(/\s+/))[3];

        if(/Q|W|T/)
        {
            $state = Globus::GRAM::JobState::PENDING;
        }
        elsif(/S|H/)
        {
            $state = Globus::GRAM::JobState::SUSPENDED
        }
        elsif(/R|E/)
        {
            $state = Globus::GRAM::JobState::ACTIVE;
        }
        else
        {
            # This else is reached by an unknown response from pbs.
            # It could be that PBS was temporarily unavailable, but that it
            # can recover and the submitted job is fine.
            # So, we want the JM to ignore this poll and keep the same state
            # as the previous state.  Returning an empty hash below will tell
            # the JM to ignore the respose.
            $self->log("qstat returned an unknown response.  Telling JM to ignore this poll");
            return {};
        }
    }

    return {JOB_STATE => $state};
}

sub cancel
{
    my $self = shift;
    my $description = $self->{JobDescription};
    my $job_id = $description->jobid();

    $self->log("cancel job $job_id");

    $self->fork_and_exec_cmd( $qdel, $job_id );

    if($? == 0)
    {
	return { JOB_STATE => Globus::GRAM::JobState::FAILED }
    }

    return Globus::GRAM::Error::JOB_CANCEL_FAILED();
}

1;
