/**
 * 
 */
package au.org.arcs.imast;

import java.sql.SQLException;
import java.util.Collection;
import java.util.Map;

import org.apache.commons.codec.binary.Base64;
import org.apache.commons.codec.digest.DigestUtils;
import org.opensaml.xml.util.DatatypeHelper;
import org.opensaml.xml.util.LazyMap;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import edu.internet2.middleware.shibboleth.common.attribute.BaseAttribute;
import edu.internet2.middleware.shibboleth.common.attribute.provider.BasicAttribute;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.AttributeResolutionException;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.ResolutionPlugIn;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.ShibbolethResolutionContext;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector.BaseDataConnector;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector.DataConnector;
import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector.LdapDataConnector;
import edu.internet2.middleware.shibboleth.common.config.attribute.resolver.dataConnector.LdapDataConnectorFactoryBean;

/**
 * @author Damien Chen
 * 
 */
public class SharedTokenDataConnector extends BaseDataConnector {

	/** Class logger. */
	private final Logger log = LoggerFactory
			.getLogger(SharedTokenDataConnector.class);

	private static String STORED_ATTRIBUTE_NAME = "auEduPersonSharedToken";

	private static String SEPARATOR = ",";

	/** ID of the attribute generated by this data connector. */
	private String generatedAttribute;

	/**
	 * ID of the attribute whose first value is used when generating the
	 * computed ID.
	 */
	private String sourceAttribute;

	/** Salt used when computing the ID. */
	private byte[] salt;

	/**
	 * Constructor.
	 * 
	 * @param source
	 *            datasource used to communicate with the database
	 * @param generatedAttributeId
	 *            ID of the attribute generated by this data connector
	 * @param sourceAttributeId
	 *            ID of the attribute whose first value is used when generating
	 *            the computed ID
	 * @param idSalt
	 *            salt used when computing the ID
	 */
	public SharedTokenDataConnector(String generatedAttributeId,
			String sourceAttributeId, byte[] idSalt) {

		if (DatatypeHelper.isEmpty(generatedAttributeId)) {
			throw new IllegalArgumentException(
					"Provided generated attribute ID must not be empty");
		}
		generatedAttribute = generatedAttributeId;

		if (DatatypeHelper.isEmpty(sourceAttributeId)) {
			throw new IllegalArgumentException(
					"Provided source attribute ID must not be empty");
		}
		sourceAttribute = sourceAttributeId;

		if (idSalt.length < 16) {
			throw new IllegalArgumentException(
					"Provided salt must be at least 16 bytes in size.");
		}
		salt = idSalt;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.ResolutionPlugIn#resolve(edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.ShibbolethResolutionContext)
	 */
	/** {@inheritDoc} */
	public Map<String, BaseAttribute> resolve(
			ShibbolethResolutionContext resolutionContext)
			throws AttributeResolutionException {

		Map<String, BaseAttribute> attributes = new LazyMap<String, BaseAttribute>();
		try {
			Collection<Object> col = super.getValuesFromAllDependencies(
					resolutionContext, STORED_ATTRIBUTE_NAME);
			String persistentId = null;
			if (col.size() < 1) {
				persistentId = getSharedToken(resolutionContext);
				storePersistentId(resolutionContext, persistentId);
			} else {
				persistentId = col.iterator().next().toString();
			}
			BasicAttribute<String> attribute = new BasicAttribute<String>();
			attribute.setId(getGeneratedAttributeId());
			attribute.getValues().add(persistentId);

			attributes.put(attribute.getId(), attribute);
		} catch (Exception e) {
			log.warn("failed to resolve " + STORED_ATTRIBUTE_NAME);
			e.printStackTrace();
		}
		return attributes;
	}

	/**
	 * Gets the persistent ID stored in the database. If one does not exist it
	 * is created.
	 * 
	 * @param resolutionContext
	 *            current resolution context
	 * 
	 * @return persistent ID
	 * 
	 * @throws AttributeResolutionException
	 *             thrown if there is a problem retrieving or storing the
	 *             persistent ID
	 */
	protected String getSharedToken(
			ShibbolethResolutionContext resolutionContext)
			throws AttributeResolutionException {

		String localId = getLocalId(resolutionContext);
		String persistentId = this.createPersistentId(resolutionContext,
				localId, salt);

		return persistentId;

	}

	protected void storePersistentId(
			ShibbolethResolutionContext resolutionContext, String persistentId) {

		String principalName = resolutionContext.getAttributeRequestContext()
				.getPrincipalName();
		(new LdapUtil()).saveAttribute(STORED_ATTRIBUTE_NAME, persistentId,
				getDependencyIds().get(0), principalName);

	}

	/**
	 * Creates a persistent ID that is unique for a given local/peer/localId
	 * tuple.
	 * 
	 * If an ID has never been issued for to the given tuple then an ID is
	 * created by taking a SHA-1 hash of the peer's entity ID, the local ID, and
	 * a salt. This is to ensure compatability with IDs created by the now
	 * deprecated {@link ComputedIDDataConnector}.
	 * 
	 * If an ID has been issued to the given tuple than a new, random type 4
	 * UUID is generated as the persistent ID.
	 * 
	 * @param resolutionContext
	 *            current resolution context
	 * @param localId
	 *            principal the the persistent ID represents
	 * @param salt
	 *            salt used when computing a persistent ID via SHA-1 hash
	 * 
	 * @return the created identifier
	 * 
	 * @throws SQLException
	 *             thrown if there is a problem communication with the database
	 */
	protected String createPersistentId(
			ShibbolethResolutionContext resolutionContext, String localId,
			byte[] salt) {
		// PersistentIdEntry entry = pidStore.new PersistentIdEntry();
		String localEntityId = resolutionContext.getAttributeRequestContext()
				.getLocalEntityId();
		String globalUniqueID = localId + localEntityId + new String(salt);
		byte[] hashValue = DigestUtils.sha(globalUniqueID);
		byte[] encodedValue = Base64.encodeBase64(hashValue);
		String persistentId = new String(encodedValue);
		persistentId = this.replace(persistentId);
		return persistentId;

	}

	private String replace(String persistentId) {
		// begin = convert non-alphanum chars in base64 to alphanum
		// (/+=)
		if (persistentId.contains("/") || persistentId.contains("+")
				|| persistentId.contains("=")) {
			String aepst;
			if (persistentId.contains("/")) {
				aepst = persistentId.replaceAll("/", "_");
				persistentId = aepst;
			}

			if (persistentId.contains("+")) {
				aepst = persistentId.replaceAll("\\+", "-");
				persistentId = aepst;
			}

			if (persistentId.contains("=")) {
				aepst = persistentId.replaceAll("=", "");
				persistentId = aepst;
			}
		}

		return persistentId;
	}

	/**
	 * Gets the local ID component of the persistent ID.
	 * 
	 * @param resolutionContext
	 *            current resolution context
	 * 
	 * @return local ID component of the persistent ID
	 * 
	 * @throws AttributeResolutionException
	 *             thrown if there is a problem resolving the local id
	 */
	protected String getLocalId(ShibbolethResolutionContext resolutionContext)
			throws AttributeResolutionException {

		String[] ids = getSourceAttributeId().split(SEPARATOR);

		StringBuffer localIdValue = new StringBuffer();
		for (int i = 0; i < ids.length; i++) {

			Collection<Object> sourceIdValues = getValuesFromAllDependencies(
					resolutionContext, ids[i]);
			if (sourceIdValues == null || sourceIdValues.isEmpty()) {
				log
						.error(
								"Source attribute {} for connector {} provide no values",
								getSourceAttributeId(), getId());
				throw new AttributeResolutionException("Source attribute "
						+ getSourceAttributeId() + " for connector " + getId()
						+ " provided no values");
			}

			if (sourceIdValues.size() > 1) {
				log
						.warn(
								"Source attribute {} for connector {} has more than one value, only the first value is used",
								getSourceAttributeId(), getId());
			}
			localIdValue.append(sourceIdValues.iterator().next().toString());
		}

		return localIdValue.toString();
	}

	/** {@inheritDoc} */
	public void validate() throws AttributeResolutionException {
		if (getDependencyIds() == null || getDependencyIds().size() != 1) {
			log.error("Computed ID " + getId()
					+ " data connectore requires exactly one dependency");
			throw new AttributeResolutionException("Computed ID " + getId()
					+ " data connectore requires exactly one dependency");
		}
	}

	/**
	 * Gets the salt used when computing the ID.
	 * 
	 * @return salt used when computing the ID
	 */
	public byte[] getSalt() {
		return salt;
	}

	/**
	 * Gets the ID of the attribute whose first value is used when generating
	 * the computed ID.
	 * 
	 * @return ID of the attribute whose first value is used when generating the
	 *         computed ID
	 */
	public String getSourceAttributeId() {
		return sourceAttribute;
	}

	/**
	 * Gets the ID of the attribute generated by this connector.
	 * 
	 * @return ID of the attribute generated by this connector
	 */
	public String getGeneratedAttributeId() {
		return generatedAttribute;
	}

}
