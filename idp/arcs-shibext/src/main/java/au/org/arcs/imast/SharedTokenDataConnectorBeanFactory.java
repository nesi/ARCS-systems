/**
 * 
 */
package au.org.arcs.imast;

import javax.sql.DataSource;

import edu.internet2.middleware.shibboleth.common.attribute.resolver.provider.dataConnector.LdapDataConnector;
import edu.internet2.middleware.shibboleth.common.config.attribute.resolver.dataConnector.BaseDataConnectorFactoryBean;
import edu.internet2.middleware.shibboleth.common.config.attribute.resolver.dataConnector.LdapDataConnectorFactoryBean;

/**
 * @author Damien Chen
 *
 */
public class SharedTokenDataConnectorBeanFactory extends
		BaseDataConnectorFactoryBean {


    /** ID of the attribute generated by the connector. */
    private String generatedAttribute;

    /** ID of the attribute whose first value is used when generating the computed ID. */
    private String sourceAttribute;

    /** Salt used when computing the ID. */
    private byte[] salt;

    /** {@inheritDoc} */
    public Class getObjectType() {
        return SharedTokenDataConnector.class;
    }


    /**
     * Gets the ID of the attribute generated by the connector.
     * 
     * @return ID of the attribute generated by the connector
     */
    public String getGeneratedAttribute() {
        return generatedAttribute;
    }

    /**
     * Sets the ID of the attribute generated by the connector.
     * 
     * @param id ID of the attribute generated by the connector
     */
    public void setGeneratedAttribute(String id) {
        generatedAttribute = id;
    }

    /**
     * Gets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @return ID of the attribute whose first value is used when generating the computed ID
     */
    public String getSourceAttribute() {
        return sourceAttribute;
    }

    /**
     * Sets the ID of the attribute whose first value is used when generating the computed ID.
     * 
     * @param id ID of the attribute whose first value is used when generating the computed ID
     */
    public void setSourceAttribute(String id) {
        this.sourceAttribute = id;
    }

    /**
     * Gets the salt used when computing the ID.
     * 
     * @return salt used when computing the ID
     */
    public byte[] getSalt() {
        return salt;
    }

    /**
     * Sets the salt used when computing the ID.
     * 
     * @param salt salt used when computing the ID
     */
    public void setSalt(byte[] salt) {
        this.salt = salt;
    }

    /** {@inheritDoc} */
    protected Object createInstance() throws Exception {
        SharedTokenDataConnector connector = new SharedTokenDataConnector(getGeneratedAttribute(),
                getSourceAttribute(), getSalt());
        populateDataConnector(connector);
        return connector;
    }



}
