/**
 * 
 */
package au.org.arcs.stps.util;

import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.util.Date;

import org.apache.log4j.Logger;

import au.org.arcs.stps.STPSException;
import au.org.arcs.stps.web.STPSAction;

import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Image;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfSignatureAppearance;
import com.lowagie.text.pdf.PdfStamper;
import com.lowagie.text.pdf.PdfWriter;

/**
 * @author Damien Chen
 * 
 */
public class PDFUtil {

	private static Logger log = Logger.getLogger(STPSAction.class.getName());

	public OutputStream genPDF(String sourceIdP, String issuer,
			String sharedToken, String cn, String mail, byte[] imageByteArray)
			throws STPSException, Exception {

		log.debug("Calling genPDF()...");

		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {

			Document document = new Document();

			PdfWriter.getInstance(document, os);

			document.open();

			if (imageByteArray != null) {
				Image image = Image.getInstance(imageByteArray);
				PdfPTable logoTable = new PdfPTable(2);
				logoTable.setTotalWidth(0);
				logoTable.getDefaultCell().setBorder(
						com.lowagie.text.Rectangle.NO_BORDER);
				logoTable.addCell(image);
				logoTable.addCell(" ");
				logoTable.addCell(" ");
				logoTable.addCell(" ");
				document.add(logoTable);
			} else {
				log.warn("Couldn't find the loga image");
			}

			document.add(Chunk.NEWLINE);

			Paragraph p = new Paragraph();
			p.setAlignment(1);
			p.setExtraParagraphSpace(5);
			p.add(new Chunk("SharedToken Statement", new Font(Font.TIMES_ROMAN,
					20)));

			document.add(p);

			document.add(Chunk.NEWLINE);

			PdfPTable attrTable = new PdfPTable(2);

			attrTable.addCell(new Phrase(18, new Chunk(
					"auEduPersonSharedToken", FontFactory.getFont(
							FontFactory.TIMES_ROMAN, 14, Font.BOLD, new Color(
									0, 0, 0)))));
			attrTable.addCell(sharedToken);

			attrTable.addCell(new Phrase(18, new Chunk("Common Name",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD,
							new Color(0, 0, 0)))));
			attrTable.addCell(cn);

			attrTable.addCell(new Phrase(18, new Chunk("Mail", FontFactory
					.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new Color(
							0, 0, 0)))));
			attrTable.addCell(mail);

			attrTable.addCell(new Phrase(18, new Chunk("Source IdP",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD,
							new Color(0, 0, 0)))));
			attrTable.addCell(sourceIdP);

			attrTable.addCell(new Phrase(18, new Chunk("Issuer", FontFactory
					.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD, new Color(
							0, 0, 0)))));
			attrTable.addCell(issuer);

			attrTable.addCell(new Phrase(18, new Chunk("Issue Date",
					FontFactory.getFont(FontFactory.TIMES_ROMAN, 14, Font.BOLD,
							new Color(0, 0, 0)))));
			attrTable.addCell(new Date().toString());

			document.add(attrTable);

			PdfPTable noteTable = new PdfPTable(1);
			noteTable.setTotalWidth(0);
			noteTable.getDefaultCell().setBorder(
					com.lowagie.text.Rectangle.NO_BORDER);

			String note1 = "1. This document is generated by ARCS SharedToken Portability Service and signed with a federation-trusted certificate. The ownership of the document is guaranteed by the request of Shibboleth authentication to the service. The document must be kept in save place and not be exposed to anyone else.";

			String note2 = "2. The document is used when a user transfers from one institution to another institution within the federation. The user will be asked to present the document to the new institution admin when he/her is registered to the institution. The admin will verify the document signature with the PDF Reader and then populate the SharedToken to the repository.";

			document.add(Chunk.NEWLINE);

			noteTable.addCell(new Phrase(18, new Chunk("Note:", FontFactory
					.getFont(FontFactory.TIMES_ROMAN, 12))));
			noteTable.addCell("");
			noteTable.addCell(new Phrase(18, new Chunk(note1, FontFactory
					.getFont(FontFactory.TIMES_ROMAN, 12))));
			noteTable.addCell("");
			noteTable.addCell(new Phrase(18, new Chunk(note2, FontFactory
					.getFont(FontFactory.TIMES_ROMAN, 12))));
			document.add(noteTable);

			document.close();
		} catch (DocumentException e) {
			String msg = "Couldn't generate the PDF document. The reason is: "
					+ e.getMessage();
			log.warn(msg);
			throw new STPSException(msg);
		}

		return os;
	}

	public ByteArrayOutputStream signPDF(String cert, String password,
			InputStream is) throws STPSException {

		log.debug("Calling signPDF()...");
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			KeyStore ks = KeyStore.getInstance("pkcs12");
			InputStream fis = null;
			try {
				fis = new FileInputStream(cert);
			} catch (FileNotFoundException e) {
				String msg = "Couldn't find the certificate: " + cert;
				log.error(msg);
				e.printStackTrace();
				throw new STPSException(msg);
			}

			ks.load(fis, password.toCharArray());

			String alias = (String) ks.aliases().nextElement();
			PrivateKey key = (PrivateKey) ks.getKey(alias, password
					.toCharArray());
			Certificate[] chain = ks.getCertificateChain(alias);

			PdfReader reader = new PdfReader(is);

			PdfStamper stp = PdfStamper.createSignature(reader, os, '\0');
			PdfSignatureAppearance sap = stp.getSignatureAppearance();
			sap.setCrypto(key, chain, null,
					PdfSignatureAppearance.WINCER_SIGNED);
			// comment next line to have an invisible signature
			sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
			stp.close();
		} catch (Exception e) {
			String msg = "Failed to sign the document. The error is: "
					+ e.getMessage();
			log.error(msg);
			e.printStackTrace();
			throw new STPSException(msg);
		}

		return os;
	}
}
