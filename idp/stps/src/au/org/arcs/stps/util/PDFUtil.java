/**
 * 
 */
package au.org.arcs.stps.util;

import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.cert.Certificate;
import java.util.Date;

import org.apache.log4j.Logger;

import au.org.arcs.stps.STPSException;
import au.org.arcs.stps.web.STPSAction;

import com.lowagie.text.Chunk;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Image;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfReader;
import com.lowagie.text.pdf.PdfSignatureAppearance;
import com.lowagie.text.pdf.PdfStamper;
import com.lowagie.text.pdf.PdfWriter;

/**
 * @author Damien Chen
 * 
 */

public class PDFUtil {

	private static Logger log = Logger.getLogger(STPSAction.class.getName());

	static int defautFontSize = 12;
	static String title = "SharedToken Ownership Statement";
	static String text1 = "This document, generated by ARCS SharedToken Portability Service and digitally signed by the Australian Research Collaboration Service, provides proof of the named user's ownership of an auEduPersonSharedToken value.";
	static String text2 = "The following information is received from the Australian Access Federation (AAF):";
	static String text3 = "This document is to be used by the user to populate their auEduPersonSharedToken value  when registering with a new AAF Identity Provider.";
	static String text4 = "The user should present the document to the new IdP Administrator at time of registered with the new institution.";
	static String text5 = "The IdP Administrator will verify the signature with the PDF Reader, confirming issuance by the Australian Research Collaboration Service, an AAF-member organisation, and then populate the value to the user's auEduPersonSharedToken attribute in the IdP's institutional directory.";
	static String text6 = "If you have any questions regarding this statement, please contact help@arcs.org.au.";

	/**
	 * Generate a PDF document.
	 * 
	 * @param sourceIdP
	 *            the IdP the user is from
	 * @param issuer
	 *            the organization that released the document
	 * @param sharedToken
	 *            the SharedToken the user holds
	 * @param cn
	 *            the common name of the user
	 * @param mail
	 *            user's email
	 * @param imageByteArray
	 *            the logo appeared on the document
	 * @param title
	 *            the title of the document
	 * @param note
	 *            the note on the document
	 * @throws STPSException
	 *             if the document couldn't be generated
	 */

	public OutputStream genPDF(String sourceIdP, String issuer,
			String sharedToken, String cn, String mail, byte[] imageByteArray)
			throws STPSException, Exception {

		log.debug("Calling genPDF()...");

		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {

			Document document = new Document();

			PdfWriter.getInstance(document, os);

			document.open();

			if (imageByteArray != null) {
				Image image = Image.getInstance(imageByteArray);
				PdfPTable logoTable = new PdfPTable(2);
				logoTable.setTotalWidth(0);
				logoTable.getDefaultCell().setBorder(
						com.lowagie.text.Rectangle.NO_BORDER);
				logoTable.addCell(image);
				logoTable.addCell(" ");
				logoTable.addCell(" ");
				logoTable.addCell(" ");
				document.add(logoTable);
			} else {
				log.warn("Couldn't find the logo image");
			}

			Paragraph pTitle = new Paragraph();
			pTitle.setAlignment(1);
			pTitle.setExtraParagraphSpace(5);
			pTitle.add(new Chunk(title, new Font(Font.TIMES_ROMAN, 20)));

			PdfPTable table1 = new PdfPTable(1);
			table1.getDefaultCell().setBorder(
					com.lowagie.text.Rectangle.NO_BORDER);

			table1.addCell(new Phrase(defautFontSize, new Chunk(text1,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));
			table1.addCell("");
			table1.addCell(new Phrase(defautFontSize, new Chunk(text2,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			PdfPTable attrTable = new PdfPTable(2);
			attrTable.getDefaultCell().setBorder(
					com.lowagie.text.Rectangle.NO_BORDER);

			attrTable
					.addCell(new Phrase(defautFontSize, new Chunk(
							"Identity Provider (IdP)", FontFactory.getFont(
									FontFactory.TIMES_ROMAN, defautFontSize,
									Font.BOLD))));
			attrTable.addCell(new Phrase(defautFontSize, new Chunk(sourceIdP,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			attrTable
					.addCell(new Phrase(defautFontSize, new Chunk(
							"auEduPersonSharedToken", FontFactory.getFont(
									FontFactory.TIMES_ROMAN, defautFontSize,
									Font.BOLD))));
			attrTable.addCell(new Phrase(defautFontSize, new Chunk(sharedToken,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			attrTable.addCell(new Phrase(defautFontSize, new Chunk(
					"Common Name", FontFactory.getFont(FontFactory.TIMES_ROMAN,
							defautFontSize, Font.BOLD))));
			attrTable.addCell(new Phrase(defautFontSize, new Chunk(cn,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			attrTable.addCell(new Phrase(defautFontSize, new Chunk("Mail",
					FontFactory.getFont(FontFactory.TIMES_ROMAN,
							defautFontSize, Font.BOLD))));
			attrTable.addCell(new Phrase(defautFontSize, new Chunk(mail,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			attrTable.addCell(new Phrase(defautFontSize, new Chunk("Issuer",
					FontFactory.getFont(FontFactory.TIMES_ROMAN,
							defautFontSize, Font.BOLD))));
			attrTable.addCell(new Phrase(defautFontSize, new Chunk(issuer,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));

			attrTable.addCell(new Phrase(defautFontSize, new Chunk(
					"Issue Date", FontFactory.getFont(FontFactory.TIMES_ROMAN,
							defautFontSize, Font.BOLD))));
			attrTable
					.addCell(new Phrase(defautFontSize, new Chunk(new Date()
							.toString(), FontFactory
							.getFont(FontFactory.TIMES_ROMAN))));

			PdfPTable table2 = new PdfPTable(1);
			table2.getDefaultCell().setBorder(
					com.lowagie.text.Rectangle.NO_BORDER);

			table2.addCell(new Phrase(defautFontSize, new Chunk(text3,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));
			table2.addCell("");
			table2.addCell(new Phrase(defautFontSize, new Chunk(text4,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));
			table2.addCell("");
			table2.addCell(new Phrase(defautFontSize, new Chunk(text5,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));
			table2.addCell("");
			table2.addCell(new Phrase(defautFontSize, new Chunk(text6,
					FontFactory.getFont(FontFactory.TIMES_ROMAN))));
			table2.addCell("");

			document.add(Chunk.NEWLINE);
			document.add(pTitle);
			document.add(Chunk.NEWLINE);
			document.add(table1);
			document.add(Chunk.NEWLINE);
			document.add(attrTable);
			document.add(Chunk.NEWLINE);
			document.add(table2);

			document.close();
		} catch (DocumentException e) {
			String msg = "Couldn't generate the PDF document. The reason is: "
					+ e.getMessage();
			log.warn(msg);
			throw new STPSException(msg);
		}

		return os;
	}

	/**
	 * Generate a PDF document.
	 * 
	 * @param cert
	 *            the file path of the signing certificate
	 * @param password
	 *            the passfrase to protect the certificate
	 * @param is
	 *            the input stream of the document to be signed.
	 * @param cn
	 *            the common name of the user
	 * @throws STPSException
	 *             if the document couldn't be signed
	 */

	public ByteArrayOutputStream signPDF(String cert, String password,
			InputStream is) throws STPSException {

		log.debug("Calling signPDF()...");
		ByteArrayOutputStream os = new ByteArrayOutputStream();

		try {
			KeyStore ks = KeyStore.getInstance("pkcs12");
			InputStream fis = null;
			try {
				fis = new FileInputStream(cert);
			} catch (FileNotFoundException e) {
				String msg = "Couldn't find the certificate: " + cert;
				log.error(msg);
				e.printStackTrace();
				throw new STPSException(msg);
			}

			ks.load(fis, password.toCharArray());

			String alias = (String) ks.aliases().nextElement();
			PrivateKey key = (PrivateKey) ks.getKey(alias, password
					.toCharArray());
			Certificate[] chain = ks.getCertificateChain(alias);

			PdfReader reader = new PdfReader(is);

			PdfStamper stp = PdfStamper.createSignature(reader, os, '\0');
			PdfSignatureAppearance sap = stp.getSignatureAppearance();
			sap.setCrypto(key, chain, null,
					PdfSignatureAppearance.WINCER_SIGNED);
			// comment next line to have an invisible signature
			sap.setVisibleSignature(new Rectangle(100, 100, 200, 200), 1, null);
			stp.close();
		} catch (Exception e) {
			String msg = "Failed to sign the document. The error is: "
					+ e.getMessage();
			log.error(msg);
			e.printStackTrace();
			throw new STPSException(msg);
		}

		return os;
	}
}
