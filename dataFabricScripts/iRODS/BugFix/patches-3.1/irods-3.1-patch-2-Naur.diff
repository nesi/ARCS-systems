diff -Naur iRODS/server/core/src/reServerLib.c iRODS_P2/server/core/src/reServerLib.c
--- iRODS/server/core/src/reServerLib.c	2012-01-06 18:12:12.000000000 -0800
+++ iRODS_P2/server/core/src/reServerLib.c	2012-04-04 13:37:47.000000000 -0700
@@ -692,9 +692,22 @@
 	    
 	    status1 = getReInfoById (rsComm, ruleExecId, &genQueryOut);
 	    if (status1 >= 0) {
+	    	sqlResult_t *exeFrequency, *exeStatus;
+	        if ((exeFrequency = getSqlResultByInx (genQueryOut,
+	         COL_RULE_EXEC_FREQUENCY)) == NULL) {
+	            rodsLog (LOG_NOTICE,
+	             "waitAndFreeReThr:getResultByInx for RULE_EXEC_FREQUENCY failed");
+	        }
+	        if ((exeStatus = getSqlResultByInx (genQueryOut,
+	         COL_RULE_EXEC_STATUS)) == NULL) {
+	            rodsLog (LOG_NOTICE,
+	             "waitAndFreeReThr:getResultByInx for RULE_EXEC_STATUS failed");
+	        }
+
+	        if(exeFrequency == NULL || strlen(exeFrequency->value) == 0 || strcmp(exeStatus->value, RE_RUNNING) == 0) {
+
 		/* something wrong since the entry is not deleted. could
 		 * be core dump */
-		freeGenQueryOut (&genQueryOut);
                 if ((reExecProc->jobType & RE_FAILED_STATUS) == 0) {
                     /* first time. just mark it RE_FAILED */
                     regExeStatus (rsComm, ruleExecId, RE_FAILED);
@@ -706,6 +719,8 @@
 		    rstrcpy (ruleExecDelInp.ruleExecId, ruleExecId, NAME_LEN);
                     status = rsRuleExecDel (rsComm, &ruleExecDelInp);
 		}
+	        }
+			freeGenQueryOut (&genQueryOut);
 	    }
 	    freeReThr (reExec, thrInx);
 	}


