--- ./rodsServer.c.bak	2010-05-21 15:50:20.000000000 +1000
+++ ./rodsServer.c	2010-05-21 15:50:20.000000000 +1000
@@ -382,10 +382,10 @@
     while ((childPid = waitpid (-1, &status, WNOHANG | WUNTRACED)) > 0) {
 	tmpAgentProc = getAgentProcByPid (childPid, agentProcHead);
 	if (tmpAgentProc != NULL) {
-	    rodsLog (LOG_NOTICE, "Agent process %s exited", childPid);
+	    rodsLog (LOG_NOTICE, "Agent process %d exited", childPid);
 	    free (tmpAgentProc);
 	} else {
-	    rodsLog (LOG_NOTICE, "Agent process %s exited but not in queue",
+	    rodsLog (LOG_NOTICE, "Agent process %d exited but not in queue",
 	      childPid); 
 	}
     }
@@ -453,64 +453,45 @@
     char buf[NAME_LEN];
     char *myBuf;
 
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_NEW_SOCK, newSock);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_PROTOCOL,
-      startupPack->irodsProt);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_RECONN_FLAG,
-      startupPack->reconnFlag);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_CONNECT_CNT,
-      startupPack->connectCnt);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_PROXY_USER,
-      startupPack->proxyUser);
-    putenv (myBuf);
-
-	 myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_PROXY_RODS_ZONE,
-      startupPack->proxyRodsZone);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_CLIENT_USER,
-      startupPack->clientUser);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_CLIENT_RODS_ZONE,
-      startupPack->clientRodsZone);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_REL_VERSION,
-      startupPack->relVersion);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_API_VERSION,
-      startupPack->apiVersion);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_OPTION,
-      startupPack->option);
-    putenv (myBuf);
-
-	myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SERVER_BOOT_TIME,
-      ServerBootTime);
-    putenv (myBuf);
+    myBuf = malloc (NAME_LEN);
+    /*memset (myBuf, 0, NAME_LEN);*/
+    snprintf (myBuf, NAME_LEN, "%d", newSock);
+    setenv (SP_NEW_SOCK, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->irodsProt);
+    setenv (SP_PROTOCOL, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->reconnFlag);
+    setenv (SP_RECONN_FLAG, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->connectCnt);
+    setenv (SP_CONNECT_CNT, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->proxyUser);
+    setenv (SP_PROXY_USER, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->proxyRodsZone);
+    setenv (SP_PROXY_RODS_ZONE, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->clientUser);
+    setenv (SP_CLIENT_USER, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->clientRodsZone);
+    setenv (SP_CLIENT_RODS_ZONE, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->relVersion);
+    setenv (SP_REL_VERSION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->apiVersion);
+    setenv (SP_API_VERSION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->option);
+    setenv (SP_OPTION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", ServerBootTime);
+    setenv (SERVER_BOOT_TIME, myBuf, 1);
+
+    free (myBuf);
 
 #ifdef windows_platform  /* windows */
 	iRODSNtGetAgentExecutableWithPath(buf, AGENT_EXE);
@@ -546,10 +527,13 @@
 {
     agentProc_t *tmpAagentProc;
 
-    tmpAagentProc = (agentProc_t *) malloc (sizeof (agentProc_t));
-    memset (tmpAagentProc, 0, sizeof (agentProc_t));
+    tmpAagentProc = *agentProcHead;
+    if (tmpAagentProc == NULL) {
+        tmpAagentProc = (agentProc_t *) malloc (sizeof (agentProc_t));
+        memset (tmpAagentProc, 0, sizeof (agentProc_t));
+    }
 
-    tmpAagentProc->next = *agentProcHead;
+    tmpAagentProc->next = NULL;
     tmpAagentProc->pid = childPid;
     rstrcpy (tmpAagentProc->proxyUser, startupPack->proxyUser, NAME_LEN);
     rstrcpy (tmpAagentProc->clientUser, startupPack->clientUser, NAME_LEN);
