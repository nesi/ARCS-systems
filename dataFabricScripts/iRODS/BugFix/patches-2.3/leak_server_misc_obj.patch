--- server/core/src/rodsServer.c.bak	2010-03-11 11:16:01.000000000 +1100
+++ server/core/src/rodsServer.c	2010-05-23 17:14:04.000000000 +1000
@@ -86,7 +86,7 @@
 #ifndef _WIN32
     signal(SIGTTIN, SIG_IGN);
     signal(SIGTTOU, SIG_IGN);
-    signal(SIGCHLD, SIG_IGN);
+    signal(SIGCHLD, SIG_DFL);
     signal(SIGPIPE, SIG_IGN);
 #ifdef osx_platform
     signal(SIGINT, (void *) serverExit);
@@ -382,10 +382,10 @@
     while ((childPid = waitpid (-1, &status, WNOHANG | WUNTRACED)) > 0) {
 	tmpAgentProc = getAgentProcByPid (childPid, agentProcHead);
 	if (tmpAgentProc != NULL) {
-	    rodsLog (LOG_NOTICE, "Agent process %s exited", childPid);
+	    rodsLog (LOG_NOTICE, "Agent process %d exited", childPid);
 	    free (tmpAgentProc);
 	} else {
-	    rodsLog (LOG_NOTICE, "Agent process %s exited but not in queue",
+	    rodsLog (LOG_NOTICE, "Agent process %d exited but not in queue",
 	      childPid); 
 	}
     }
@@ -453,64 +453,45 @@
     char buf[NAME_LEN];
     char *myBuf;
 
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_NEW_SOCK, newSock);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_PROTOCOL,
-      startupPack->irodsProt);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_RECONN_FLAG,
-      startupPack->reconnFlag);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SP_CONNECT_CNT,
-      startupPack->connectCnt);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_PROXY_USER,
-      startupPack->proxyUser);
-    putenv (myBuf);
-
-	 myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_PROXY_RODS_ZONE,
-      startupPack->proxyRodsZone);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_CLIENT_USER,
-      startupPack->clientUser);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_CLIENT_RODS_ZONE,
-      startupPack->clientRodsZone);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_REL_VERSION,
-      startupPack->relVersion);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_API_VERSION,
-      startupPack->apiVersion);
-    putenv (myBuf);
-
-    myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%s", SP_OPTION,
-      startupPack->option);
-    putenv (myBuf);
-
-	myBuf = malloc (NAME_LEN * 2);
-    snprintf (myBuf, NAME_LEN * 2, "%s=%d", SERVER_BOOT_TIME,
-      ServerBootTime);
-    putenv (myBuf);
+    myBuf = malloc (NAME_LEN);
+    /*memset (myBuf, 0, NAME_LEN);*/
+    snprintf (myBuf, NAME_LEN, "%d", newSock);
+    setenv (SP_NEW_SOCK, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->irodsProt);
+    setenv (SP_PROTOCOL, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->reconnFlag);
+    setenv (SP_RECONN_FLAG, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", startupPack->connectCnt);
+    setenv (SP_CONNECT_CNT, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->proxyUser);
+    setenv (SP_PROXY_USER, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->proxyRodsZone);
+    setenv (SP_PROXY_RODS_ZONE, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->clientUser);
+    setenv (SP_CLIENT_USER, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->clientRodsZone);
+    setenv (SP_CLIENT_RODS_ZONE, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->relVersion);
+    setenv (SP_REL_VERSION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->apiVersion);
+    setenv (SP_API_VERSION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%s", startupPack->option);
+    setenv (SP_OPTION, myBuf, 1);
+
+    snprintf (myBuf, NAME_LEN, "%d", ServerBootTime);
+    setenv (SERVER_BOOT_TIME, myBuf, 1);
+
+    free (myBuf);
 
 #ifdef windows_platform  /* windows */
 	iRODSNtGetAgentExecutableWithPath(buf, AGENT_EXE);
--- ./lib/core/src/miscUtil.c.bak	2010-02-10 12:53:45.000000000 +1100
+++ ./lib/core/src/miscUtil.c	2010-05-14 10:41:38.000000000 +1000
@@ -771,6 +771,10 @@
       free (dataObjSqlResult->ownerName.value);
     if (dataObjSqlResult->replNum.value != NULL)
       free (dataObjSqlResult->replNum.value);
+    if (dataObjSqlResult->dataMode.value != NULL)
+        free (dataObjSqlResult->dataMode.value);
+    if (dataObjSqlResult->rescGrp.value != NULL)
+        free (dataObjSqlResult->rescGrp.value);
 
     memset (dataObjSqlResult, 0, sizeof (dataObjSqlResult_t));
 
--- server/core/src/objMetaOpr.c.bak	2010-05-14 10:42:13.000000000 +1000
+++ server/core/src/objMetaOpr.c	2010-05-14 10:46:52.000000000 +1000
@@ -2278,6 +2278,8 @@
           NULL) {
             rodsLog (LOG_ERROR,
               "isData: getSqlResultByInx for COL_D_DATA_ID failed");
+            freeGenQueryOut (&genQueryOut);
+            clearGenQueryInp (&genQueryInp);
             return (UNMATCHED_KEY_OR_INDEX);
         }
 	if (dataId != NULL) {
@@ -2285,6 +2287,7 @@
 	}
     }
 
+    freeGenQueryOut (&genQueryOut);
     clearGenQueryInp (&genQueryInp);
     return(status);
 }
@@ -2310,6 +2313,8 @@
           NULL) {
             rodsLog (LOG_ERROR,
               "isColl: getSqlResultByInx for COL_D_DATA_ID failed");
+            freeGenQueryOut (&genQueryOut);
+            clearGenQueryInp (&genQueryInp);
             return (UNMATCHED_KEY_OR_INDEX);
         }
 
@@ -2318,6 +2323,7 @@
 	}
     }
 
+    freeGenQueryOut (&genQueryOut);
     clearGenQueryInp (&genQueryInp);
     return(status);
 }
@@ -2336,6 +2342,7 @@
     addInxIval (&genQueryInp.selectInp, COL_USER_ID, 1);
     genQueryInp.maxRows = 2;
     status =  rsGenQuery (rsComm, &genQueryInp, &genQueryOut);
+    freeGenQueryOut (&genQueryOut);
     clearGenQueryInp (&genQueryInp);
     return(status);
 }
@@ -2355,6 +2362,7 @@
     addInxIval (&genQueryInp.selectInp, COL_R_RESC_ID, 1);
     genQueryInp.maxRows = 2;
     status =  rsGenQuery (rsComm, &genQueryInp, &genQueryOut);
+    freeGenQueryOut (&genQueryOut);
     clearGenQueryInp (&genQueryInp);
     return(status);
 }
